# My personal settings that are applied globally (per-user) and with higher precedence than
# per-project-directory `.clangd` files.  This must only have settings that should be applied to
# *every* source file that `clangd` processes (but note: `If`-block conditions may be used to
# limit which settings here apply to which projects and files).  These settings will be merged
# with any provided by a project's `.clangd` file.
#
# See: https://clangd.llvm.org/config

Diagnostics:
  UnusedIncludes: Strict

InlayHints:
  Enabled: Yes

Hover:
  ShowAKA: Yes

# TODO: Would this avoid the `std::bad_alloc` bug in `clangd` versions 16 & 17 in OpenIndiana
# (which seemed to happen when it tried to index the standard library)?
#
#Index:
#  StandardLibrary: No

---

If:
  PathMatch: [ '.*' ]
 #PathExclude: [ ... , ... ]

CompileFlags:
  Remove: [
    -Werror,
    -std=*,  # TODO: Is this OK for *every* source file?
  ]
  Add: [
    -std=gnu17,  # TODO: Is this OK for *every* source file?
    -O3,  # Needed for complete diagnostics.
    -Wall, -Wextra, -Wconversion, -Wpedantic,
    -Werror=implicit-function-declaration,
    -Werror=incompatible-pointer-types,
   #-Wno-error=unknown-warning-option,
    -Wbad-function-cast, -Wcast-function-type, -Wcast-qual, -Wcast-align,
    -Wswitch-enum, -Wcovered-switch-default,
    -Wconditional-uninitialized, -Wstrict-overflow=5,
    -Wloop-analysis,
    -Wpointer-arith, -Wnullable-to-nonnull-conversion,
    -Wwrite-strings,
    -Winit-self,
    -Wshift-overflow, -Wshift-sign-overflow,
    -Wformat=2, -Wformat-non-iso, -Wformat-signedness, -Wformat-type-confusion, -Wno-format-pedantic,
    -Wshadow,
    -Wassign-enum, -Wduplicate-enum,
    -Wfloat-equal,
    -Watomic-implicit-seq-cst,
    -Wover-aligned,
    -Wused-but-marked-unused,
    -Wundef,
   #-Wpacked, -Wpadded, # -Wno-error=padded,
    -Walloca,
    -Wunreachable-code-aggressive,
    -Wredundant-decls, -Wredundant-parens, -Wextra-semi-stmt, -Wextra-semi,
    -Wstrict-prototypes, -Wold-style-definition, -Wmissing-prototypes, -Wmissing-declarations,
    -Wtype-limits, -Wtautological-constant-in-range-compare,
    -Wunused-macros,
   #-Wdeprecated,
    -Wgcc-compat,
    -Wno-language-extension-token, -Wno-variadic-macros,
    -Wno-gnu,
    -Wno-empty-translation-unit,  # Avoid clangd's spurious generation of this.

    # Sometimes helpful with some codebases:
   #-Wno-conversion,  # Only needed to actually no-error sign-conversion.
   #-Wno-sign-conversion,
   #-Wno-cast-qual,
   #-Wno-incompatible-pointer-types-discards-qualifiers,
   #-Wno-extra-semi-stmt,
  ]

#---
#
# Sometimes helpful to manually tell `clangd` to use particular compiler flags (e.g. `-I/dir`,
# `-DFOO=bar`, `-m64`, etc.) for some project, when `compile_commands.json` can't be generated for
# it for some reason (i.e. when `bear` can't even be used), and when a `.clangd` file shouldn't be
# added in the project's directory.  A directory specified here with `CompilationDatabase:` must
# contain either `compile_commands.json` or `compile_flags.txt`, and you'd manually populate the
# contents of such file.
#
#If:
#  PathMatch: '(.*/)?something/special/.+'
#
#CompileFlags:
#  CompilationDatabase: ../my/clangd/something-special/
#
#---
