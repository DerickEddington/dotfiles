#! /usr/bin/env bash
set -o errexit -o nounset
shopt -s assoc_expand_once extglob
(( "${VERBOSE:=0}" >= 3 )) && set -o xtrace
(( "${VERBOSE:=0}" >= 4 )) && set -o verbose


# TODO: Rename this file to ./my-remote-setup, replacing the previous version.


# Capture arguments, before anything else could mess with them.

self=$(basename "$0") ; readonly self

(( $# == 1 )) || {
    echo "Usage: $self ssh://[USER@]HOSTNAME[:PORT]"
    echo "   or: $self vagrant://[NAME|ID]"
    exit 1
} 1>&2

readonly remoteUrl=$1


# shellcheck source=../share/my/bash/helpers.bash
source "${XDG_DATA_HOME:-$HOME/.local/share}"/my/bash/helpers.bash


# Functions

function rsh { rsh-cd . "$@" ;}

function rsh-cd {
    local shOpts=('set -e;')
    (( VERBOSE >= 3 )) && shOpts+=('set -x;')
    (( VERBOSE >= 4 )) && shOpts+=('set -v;')
    remote-sh-cd "$remoteUrl" "$1" "${shOpts[*]} $2" "${@:3}"
}

function rsh-in-bd { rsh-cd "$remoteBootstrapDir" "$@" ;}


# TODO: Functions for each operation.


readonly baseDirToCopyForBootstrap="$MY_DATA_HOME"/.local/share/my
readonly dirsNeededForBootstrap=(sh bash platform/bootstrap-dotfiles)

attempts=5
while (( attempts-- >= 1 )); do
    # (Use `mktemp` in the local host, because it might not be available in the remote host.)
    remoteBootstrapDir=$(gnu mktemp -u XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX)

    if remoteBootstrapDir=$(rsh '
                                bootstrapDir="${TMPDIR:-/tmp}"/'"$(quote "$remoteBootstrapDir")"'
                                if mkdir -m u=rwx,g=,o= "$bootstrapDir" > /dev/null 2>&1 ; then
                                    printf "%s" "$bootstrapDir"
                                else
                                    exit 1
                                fi
                            ')
    then
        break
    else
        unset remoteBootstrapDir
    fi
done
readonly remoteBootstrapDir

[ "$remoteBootstrapDir" ] || fail "TODO" 3


gnu tar --directory="$baseDirToCopyForBootstrap" \
    --create --transform="s,^,$remoteBootstrapDir/," --dereference \
    "${dirsNeededForBootstrap[@]}" \
| \
rsh-in-bd 'tar xf -'


readonly localDotfilesRepo=${MY_REMOTE_SETUP_DOTFILES_FROM_REPO:-$HOME/.dotfiles}
bundleRefs=${MY_REMOTE_SETUP_DOTFILES_FROM_REFS:-HEAD main}
split-on-words "$bundleRefs" bundleRefs ; readonly bundleRefs

# As bundle is created, immediately output it over the connection to the remote without having an
# intermediate local file.
#
git --git-dir="$localDotfilesRepo" bundle create - "${bundleRefs[@]}" \
| \
rsh-in-bd 'cat > ./dotfiles.bundle'


rsh-in-bd '
    XDG_DATA_HOME="$PWD"/.local/share XDG_CONFIG_HOME="$PWD"/.config \
    VERBOSE='"$VERBOSE"' \
        sh ./.local/share/my/platform/bootstrap-dotfiles/phase0.sh
'  # Note: Do not have `-T`, because we might need to interact with other side.
