#! /usr/bin/env bash
set -o errexit -o nounset
shopt -s assoc_expand_once extglob
(( "${VERBOSE:=0}" >= 3 )) && set -o xtrace
(( "${VERBOSE:=0}" >= 4 )) && set -o verbose


# TODO: Rename this file to ./my-remote-setup, replacing the previous version.


# Capture arguments, before anything else could mess with them.

self=$(basename "$0"); readonly self
readonly args=("$@")

(( $# == 1 )) || {
    echo "Usage: $self ssh://[USER@]HOSTNAME[:PORT]"
    echo "   or: $self vagrant://[NAME|ID]"
    echo "   or: $self dir:LOCALDIR"
    exit 1
} 1>&2


# shellcheck source=../share/my/bash/helpers.bash
source "${XDG_DATA_HOME:-$HOME/.local/share}"/my/bash/helpers.bash


# Functions

function process-vars
{
    process-args
    process-env-vars

    readonly baseDirToCopyForBootstrap="${MY_DATA_HOME:?}"/.local/share/my
    readonly dirsNeededForBootstrap=(sh bash deploy-setup)
}

function process-args
{
    remoteUrl="${args[0]}"
    # shellcheck disable=SC2016
    remoteHomeDirExpr='"${HOME:?}"'

    if [[ "$remoteUrl" =~ ^dir:(.*)$ ]]; then
        targetLocalDir=${BASH_REMATCH[1]}
        if [ "$targetLocalDir" ]; then
            targetLocalDir=$(gnu realpath -m -L -s "$targetLocalDir")
            if [ -d "$targetLocalDir" ] \
                   && [ -r "$targetLocalDir" ] && [ -w "$targetLocalDir" ] && [ -x "$targetLocalDir" ]
            then
                remoteHomeDirExpr=$(quote "$targetLocalDir")
                remoteUrl=shell://localhost
            else
                error "Invalid directory: $(quote "$targetLocalDir")" 2
            fi
        else
            error "Missing directory name in URL: $(quote "$remoteUrl")!" 3
        fi
    fi

    readonly remoteUrl remoteHomeDirExpr
}

function process-env-vars
{
    localDotfilesRepo=${MY_REMOTE_SETUP_DOTFILES_FROM_REPO:-$HOME/.dotfiles}
    if ! [[ "$localDotfilesRepo" = */@(.git|.dotfiles) ]]; then
        localDotfilesRepo+=/.git
    fi
    localDotfilesRepo=$(gnu realpath -m -L -s "$localDotfilesRepo") || return

    [ -r "$localDotfilesRepo" ] || error "Invalid dotfiles repo: $(quote "$localDotfilesRepo")" 4

    bundleRefs=${MY_REMOTE_SETUP_DOTFILES_FROM_REFS:-HEAD main}
    split-on-words "$bundleRefs" bundleRefs

    primaryDotfilesBranch=${bundleRefs[0]}  # The first ref is considered the primary.

    readonly localDotfilesRepo bundleRefs primaryDotfilesBranch
}

function rsh { rsh-cd . "$@" ;}

function rsh-cd {
    local shOpts=('set -e;')
    (( VERBOSE >= 3 )) && shOpts+=('set -x;')
    (( VERBOSE >= 4 )) && shOpts+=('set -v;')
    remote-sh-cd "$remoteUrl" "$1" "${shOpts[*]} $2" "${@:3}"
}

function rsh-in-bd { rsh-cd "$remoteBootstrapDir" "$@" ;}

function make-bootstrap-dir
{
    local attempts=5
    while (( attempts-- >= 1 )); do
        # (Use `mktemp` in the local host, because it might not be available in a remote host.)
        remoteBootstrapDir=$(gnu mktemp -u XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX)

        # shellcheck disable=SC2016
        if remoteBootstrapDir=$(rsh '
                                    tmpDir=${TMPDIR:-/tmp}
                                    bootstrapDir=$tmpDir/'"$(quote "$remoteBootstrapDir")"'

                                    if mkdir -m u=rwx,g=,o= "$bootstrapDir" ; then
                                        printf "%s" "$bootstrapDir"
                                    else
                                        exit 1
                                    fi
                                ')
        then
            break
        else
            unset remoteBootstrapDir
        fi
    done
    readonly remoteBootstrapDir

    [ "$remoteBootstrapDir" ] || fail "Failed to prepare bootstrap directory in target host!" 5
}

function copy-bootstrap-scripts
{
    local - ; set -o pipefail

    make-bootstrap-dir

    gnu tar --create --directory="$baseDirToCopyForBootstrap" --dereference \
        "${dirsNeededForBootstrap[@]}" \
    | \
    rsh-in-bd 'tar xf -'  # (Any `tar` implementation, not only GNU's, should work this way.)
}

function copy-dotfiles-bundle
{
    local - ; set -o pipefail

    # As bundle is created, immediately output it over the connection to the remote without having
    # an intermediate local file.
    #
    git --git-dir="$localDotfilesRepo" bundle create - "${bundleRefs[@]}" \
    | \
    rsh-in-bd 'cat > ./dotfiles.git.bundle'
}

function copy-bootstrap-files
{
    copy-bootstrap-scripts
    copy-dotfiles-bundle
}

function run-bootstrap
{
    rsh-in-bd "
        HOME=$remoteHomeDirExpr         \
        VERBOSE=$(quote "$VERBOSE")     \
            ./.local/share/my/deploy-setup/bootstrap/start0.sh $(quote "$primaryDotfilesBranch")
    "
}


# Operations

process-vars
copy-bootstrap-files
run-bootstrap
